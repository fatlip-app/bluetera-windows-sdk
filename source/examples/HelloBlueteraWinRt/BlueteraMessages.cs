// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: bluetera_messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Bluetera {

  /// <summary>Holder for reflection information generated from bluetera_messages.proto</summary>
  public static partial class BlueteraMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for bluetera_messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BlueteraMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdibHVldGVyYV9tZXNzYWdlcy5wcm90bxIIYmx1ZXRlcmEiHAoLRWNob1Bh",
            "eWxvYWQSDQoFdmFsdWUYASABKAkiRAoFRXJyb3ISLQoGbW9kdWxlGAEgASgO",
            "Mh0uYmx1ZXRlcmEuQmx1ZXRlcmFNb2R1bGVzVHlwZRIMCgRjb2RlGAIgASgN",
            "IkwKFkltdUFjY2VsZXJhdGlvblBheWxvYWQSEQoJdGltZXN0YW1wGAEgASgN",
            "EgkKAXgYAiABKAISCQoBeRgDIAEoAhIJCgF6GAQgASgCIlUKFEltdVF1YXRl",
            "cm5pb25QYXlsb2FkEhEKCXRpbWVzdGFtcBgBIAEoDRIJCgF3GAIgASgCEgkK",
            "AXgYAyABKAISCQoBeRgEIAEoAhIJCgF6GAUgASgCItUBCg9Eb3dubGlua01l",
            "c3NhZ2USOAoMYWNjZWxlcmF0aW9uGAEgASgLMiAuYmx1ZXRlcmEuSW11QWNj",
            "ZWxlcmF0aW9uUGF5bG9hZEgAEjQKCnF1YXRlcm5pb24YAiABKAsyHi5ibHVl",
            "dGVyYS5JbXVRdWF0ZXJuaW9uUGF5bG9hZEgAEiAKBWVycm9yGBAgASgLMg8u",
            "Ymx1ZXRlcmEuRXJyb3JIABIlCgRlY2hvGBEgASgLMhUuYmx1ZXRlcmEuRWNo",
            "b1BheWxvYWRIAEIJCgdwYXlsb2FkIk4KCEltdVN0YXJ0EhIKCmRhdGFfdHlw",
            "ZXMYASABKAcSCwoDb2RyGAIgASgNEg8KB2FjY19mc3IYAyABKA0SEAoIZ3ly",
            "b19mc3IYBCABKA0iTAoKSW11Q29tbWFuZBIjCgVzdGFydBgBIAEoCzISLmJs",
            "dWV0ZXJhLkltdVN0YXJ0SAASDgoEc3RvcBgCIAEoCEgAQgkKB3BheWxvYWQi",
            "ZgoNVXBsaW5rTWVzc2FnZRIjCgNpbXUYASABKAsyFC5ibHVldGVyYS5JbXVD",
            "b21tYW5kSAASJQoEZWNobxgRIAEoCzIVLmJsdWV0ZXJhLkVjaG9QYXlsb2Fk",
            "SABCCQoHcGF5bG9hZCo2ChNCbHVldGVyYU1vZHVsZXNUeXBlEgoKBlNZU1RF",
            "TRAAEgcKA0lNVRABEgoKBlNEQ0FSRBACKkYKC0ltdURhdGFUeXBlEgsKB1VO",
            "S05PV04QABIOCgpRVUFURVJOSU9OEAESEQoNQUNDRUxFUk9NRVRFUhACEgcK",
            "A1JBVxAEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Bluetera.BlueteraModulesType), typeof(global::Bluetera.ImuDataType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.EchoPayload), global::Bluetera.EchoPayload.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.Error), global::Bluetera.Error.Parser, new[]{ "Module", "Code" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.ImuAccelerationPayload), global::Bluetera.ImuAccelerationPayload.Parser, new[]{ "Timestamp", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.ImuQuaternionPayload), global::Bluetera.ImuQuaternionPayload.Parser, new[]{ "Timestamp", "W", "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.DownlinkMessage), global::Bluetera.DownlinkMessage.Parser, new[]{ "Acceleration", "Quaternion", "Error", "Echo" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.ImuStart), global::Bluetera.ImuStart.Parser, new[]{ "DataTypes", "Odr", "AccFsr", "GyroFsr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.ImuCommand), global::Bluetera.ImuCommand.Parser, new[]{ "Start", "Stop" }, new[]{ "Payload" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Bluetera.UplinkMessage), global::Bluetera.UplinkMessage.Parser, new[]{ "Imu", "Echo" }, new[]{ "Payload" }, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Generic payloads / enums
  /// </summary>
  public enum BlueteraModulesType {
    [pbr::OriginalName("SYSTEM")] System = 0,
    [pbr::OriginalName("IMU")] Imu = 1,
    [pbr::OriginalName("SDCARD")] Sdcard = 2,
  }

  /// <summary>
  /// Control messsages - from host to Bluetera
  /// </summary>
  public enum ImuDataType {
    [pbr::OriginalName("UNKNOWN")] Unknown = 0,
    [pbr::OriginalName("QUATERNION")] Quaternion = 1,
    [pbr::OriginalName("ACCELEROMETER")] Accelerometer = 2,
    [pbr::OriginalName("RAW")] Raw = 4,
  }

  #endregion

  #region Messages
  public sealed partial class EchoPayload : pb::IMessage<EchoPayload> {
    private static readonly pb::MessageParser<EchoPayload> _parser = new pb::MessageParser<EchoPayload>(() => new EchoPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EchoPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchoPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchoPayload(EchoPayload other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EchoPayload Clone() {
      return new EchoPayload(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EchoPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EchoPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EchoPayload other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Error : pb::IMessage<Error> {
    private static readonly pb::MessageParser<Error> _parser = new pb::MessageParser<Error>(() => new Error());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Error> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error(Error other) : this() {
      module_ = other.module_;
      code_ = other.code_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Error Clone() {
      return new Error(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private global::Bluetera.BlueteraModulesType module_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.BlueteraModulesType Module {
      get { return module_; }
      set {
        module_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private uint code_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Error);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Error other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Module != other.Module) return false;
      if (Code != other.Code) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Module != 0) hash ^= Module.GetHashCode();
      if (Code != 0) hash ^= Code.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Module != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Module);
      }
      if (Code != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Code);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Module != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Module);
      }
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Error other) {
      if (other == null) {
        return;
      }
      if (other.Module != 0) {
        Module = other.Module;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            module_ = (global::Bluetera.BlueteraModulesType) input.ReadEnum();
            break;
          }
          case 16: {
            Code = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Data messasges - from Bluetera to host
  /// </summary>
  public sealed partial class ImuAccelerationPayload : pb::IMessage<ImuAccelerationPayload> {
    private static readonly pb::MessageParser<ImuAccelerationPayload> _parser = new pb::MessageParser<ImuAccelerationPayload>(() => new ImuAccelerationPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImuAccelerationPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuAccelerationPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuAccelerationPayload(ImuAccelerationPayload other) : this() {
      timestamp_ = other.timestamp_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuAccelerationPayload Clone() {
      return new ImuAccelerationPayload(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 2;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 3;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 4;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImuAccelerationPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImuAccelerationPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (X != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImuAccelerationPayload other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 21: {
            X = input.ReadFloat();
            break;
          }
          case 29: {
            Y = input.ReadFloat();
            break;
          }
          case 37: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImuQuaternionPayload : pb::IMessage<ImuQuaternionPayload> {
    private static readonly pb::MessageParser<ImuQuaternionPayload> _parser = new pb::MessageParser<ImuQuaternionPayload>(() => new ImuQuaternionPayload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImuQuaternionPayload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuQuaternionPayload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuQuaternionPayload(ImuQuaternionPayload other) : this() {
      timestamp_ = other.timestamp_;
      w_ = other.w_;
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuQuaternionPayload Clone() {
      return new ImuQuaternionPayload(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private uint timestamp_;
    /// <summary>
    /// TODO: consider sending only (x,y,z), and inferring w from it (the norm of the quaternion should equal 1.0)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 2;
    private float w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 3;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 4;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 5;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImuQuaternionPayload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImuQuaternionPayload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(W, other.W)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (W != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(W);
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Timestamp);
      }
      if (W != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(W);
      }
      if (X != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
      }
      if (W != 0F) {
        size += 1 + 4;
      }
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImuQuaternionPayload other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.W != 0F) {
        W = other.W;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadUInt32();
            break;
          }
          case 21: {
            W = input.ReadFloat();
            break;
          }
          case 29: {
            X = input.ReadFloat();
            break;
          }
          case 37: {
            Y = input.ReadFloat();
            break;
          }
          case 45: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownlinkMessage : pb::IMessage<DownlinkMessage> {
    private static readonly pb::MessageParser<DownlinkMessage> _parser = new pb::MessageParser<DownlinkMessage>(() => new DownlinkMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownlinkMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownlinkMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownlinkMessage(DownlinkMessage other) : this() {
      switch (other.PayloadCase) {
        case PayloadOneofCase.Acceleration:
          Acceleration = other.Acceleration.Clone();
          break;
        case PayloadOneofCase.Quaternion:
          Quaternion = other.Quaternion.Clone();
          break;
        case PayloadOneofCase.Error:
          Error = other.Error.Clone();
          break;
        case PayloadOneofCase.Echo:
          Echo = other.Echo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownlinkMessage Clone() {
      return new DownlinkMessage(this);
    }

    /// <summary>Field number for the "acceleration" field.</summary>
    public const int AccelerationFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.ImuAccelerationPayload Acceleration {
      get { return payloadCase_ == PayloadOneofCase.Acceleration ? (global::Bluetera.ImuAccelerationPayload) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Acceleration;
      }
    }

    /// <summary>Field number for the "quaternion" field.</summary>
    public const int QuaternionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.ImuQuaternionPayload Quaternion {
      get { return payloadCase_ == PayloadOneofCase.Quaternion ? (global::Bluetera.ImuQuaternionPayload) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Quaternion;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.Error Error {
      get { return payloadCase_ == PayloadOneofCase.Error ? (global::Bluetera.Error) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Error;
      }
    }

    /// <summary>Field number for the "echo" field.</summary>
    public const int EchoFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.EchoPayload Echo {
      get { return payloadCase_ == PayloadOneofCase.Echo ? (global::Bluetera.EchoPayload) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Echo;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Acceleration = 1,
      Quaternion = 2,
      Error = 16,
      Echo = 17,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownlinkMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownlinkMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Acceleration, other.Acceleration)) return false;
      if (!object.Equals(Quaternion, other.Quaternion)) return false;
      if (!object.Equals(Error, other.Error)) return false;
      if (!object.Equals(Echo, other.Echo)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadCase_ == PayloadOneofCase.Acceleration) hash ^= Acceleration.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Quaternion) hash ^= Quaternion.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Error) hash ^= Error.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Echo) hash ^= Echo.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.Acceleration) {
        output.WriteRawTag(10);
        output.WriteMessage(Acceleration);
      }
      if (payloadCase_ == PayloadOneofCase.Quaternion) {
        output.WriteRawTag(18);
        output.WriteMessage(Quaternion);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Echo) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Echo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payloadCase_ == PayloadOneofCase.Acceleration) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acceleration);
      }
      if (payloadCase_ == PayloadOneofCase.Quaternion) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quaternion);
      }
      if (payloadCase_ == PayloadOneofCase.Error) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Error);
      }
      if (payloadCase_ == PayloadOneofCase.Echo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Echo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownlinkMessage other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Acceleration:
          if (Acceleration == null) {
            Acceleration = new global::Bluetera.ImuAccelerationPayload();
          }
          Acceleration.MergeFrom(other.Acceleration);
          break;
        case PayloadOneofCase.Quaternion:
          if (Quaternion == null) {
            Quaternion = new global::Bluetera.ImuQuaternionPayload();
          }
          Quaternion.MergeFrom(other.Quaternion);
          break;
        case PayloadOneofCase.Error:
          if (Error == null) {
            Error = new global::Bluetera.Error();
          }
          Error.MergeFrom(other.Error);
          break;
        case PayloadOneofCase.Echo:
          if (Echo == null) {
            Echo = new global::Bluetera.EchoPayload();
          }
          Echo.MergeFrom(other.Echo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bluetera.ImuAccelerationPayload subBuilder = new global::Bluetera.ImuAccelerationPayload();
            if (payloadCase_ == PayloadOneofCase.Acceleration) {
              subBuilder.MergeFrom(Acceleration);
            }
            input.ReadMessage(subBuilder);
            Acceleration = subBuilder;
            break;
          }
          case 18: {
            global::Bluetera.ImuQuaternionPayload subBuilder = new global::Bluetera.ImuQuaternionPayload();
            if (payloadCase_ == PayloadOneofCase.Quaternion) {
              subBuilder.MergeFrom(Quaternion);
            }
            input.ReadMessage(subBuilder);
            Quaternion = subBuilder;
            break;
          }
          case 130: {
            global::Bluetera.Error subBuilder = new global::Bluetera.Error();
            if (payloadCase_ == PayloadOneofCase.Error) {
              subBuilder.MergeFrom(Error);
            }
            input.ReadMessage(subBuilder);
            Error = subBuilder;
            break;
          }
          case 138: {
            global::Bluetera.EchoPayload subBuilder = new global::Bluetera.EchoPayload();
            if (payloadCase_ == PayloadOneofCase.Echo) {
              subBuilder.MergeFrom(Echo);
            }
            input.ReadMessage(subBuilder);
            Echo = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImuStart : pb::IMessage<ImuStart> {
    private static readonly pb::MessageParser<ImuStart> _parser = new pb::MessageParser<ImuStart>(() => new ImuStart());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImuStart> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStart() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStart(ImuStart other) : this() {
      dataTypes_ = other.dataTypes_;
      odr_ = other.odr_;
      accFsr_ = other.accFsr_;
      gyroFsr_ = other.gyroFsr_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuStart Clone() {
      return new ImuStart(this);
    }

    /// <summary>Field number for the "data_types" field.</summary>
    public const int DataTypesFieldNumber = 1;
    private uint dataTypes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DataTypes {
      get { return dataTypes_; }
      set {
        dataTypes_ = value;
      }
    }

    /// <summary>Field number for the "odr" field.</summary>
    public const int OdrFieldNumber = 2;
    private uint odr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Odr {
      get { return odr_; }
      set {
        odr_ = value;
      }
    }

    /// <summary>Field number for the "acc_fsr" field.</summary>
    public const int AccFsrFieldNumber = 3;
    private uint accFsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint AccFsr {
      get { return accFsr_; }
      set {
        accFsr_ = value;
      }
    }

    /// <summary>Field number for the "gyro_fsr" field.</summary>
    public const int GyroFsrFieldNumber = 4;
    private uint gyroFsr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint GyroFsr {
      get { return gyroFsr_; }
      set {
        gyroFsr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImuStart);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImuStart other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DataTypes != other.DataTypes) return false;
      if (Odr != other.Odr) return false;
      if (AccFsr != other.AccFsr) return false;
      if (GyroFsr != other.GyroFsr) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DataTypes != 0) hash ^= DataTypes.GetHashCode();
      if (Odr != 0) hash ^= Odr.GetHashCode();
      if (AccFsr != 0) hash ^= AccFsr.GetHashCode();
      if (GyroFsr != 0) hash ^= GyroFsr.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DataTypes != 0) {
        output.WriteRawTag(13);
        output.WriteFixed32(DataTypes);
      }
      if (Odr != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Odr);
      }
      if (AccFsr != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(AccFsr);
      }
      if (GyroFsr != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(GyroFsr);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DataTypes != 0) {
        size += 1 + 4;
      }
      if (Odr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Odr);
      }
      if (AccFsr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AccFsr);
      }
      if (GyroFsr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GyroFsr);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImuStart other) {
      if (other == null) {
        return;
      }
      if (other.DataTypes != 0) {
        DataTypes = other.DataTypes;
      }
      if (other.Odr != 0) {
        Odr = other.Odr;
      }
      if (other.AccFsr != 0) {
        AccFsr = other.AccFsr;
      }
      if (other.GyroFsr != 0) {
        GyroFsr = other.GyroFsr;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DataTypes = input.ReadFixed32();
            break;
          }
          case 16: {
            Odr = input.ReadUInt32();
            break;
          }
          case 24: {
            AccFsr = input.ReadUInt32();
            break;
          }
          case 32: {
            GyroFsr = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImuCommand : pb::IMessage<ImuCommand> {
    private static readonly pb::MessageParser<ImuCommand> _parser = new pb::MessageParser<ImuCommand>(() => new ImuCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImuCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuCommand(ImuCommand other) : this() {
      switch (other.PayloadCase) {
        case PayloadOneofCase.Start:
          Start = other.Start.Clone();
          break;
        case PayloadOneofCase.Stop:
          Stop = other.Stop;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImuCommand Clone() {
      return new ImuCommand(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.ImuStart Start {
      get { return payloadCase_ == PayloadOneofCase.Start ? (global::Bluetera.ImuStart) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Start;
      }
    }

    /// <summary>Field number for the "stop" field.</summary>
    public const int StopFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Stop {
      get { return payloadCase_ == PayloadOneofCase.Stop ? (bool) payload_ : false; }
      set {
        payload_ = value;
        payloadCase_ = PayloadOneofCase.Stop;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Start = 1,
      Stop = 2,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImuCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImuCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Start, other.Start)) return false;
      if (Stop != other.Stop) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadCase_ == PayloadOneofCase.Start) hash ^= Start.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Stop) hash ^= Stop.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.Start) {
        output.WriteRawTag(10);
        output.WriteMessage(Start);
      }
      if (payloadCase_ == PayloadOneofCase.Stop) {
        output.WriteRawTag(16);
        output.WriteBool(Stop);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payloadCase_ == PayloadOneofCase.Start) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Start);
      }
      if (payloadCase_ == PayloadOneofCase.Stop) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImuCommand other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Start:
          if (Start == null) {
            Start = new global::Bluetera.ImuStart();
          }
          Start.MergeFrom(other.Start);
          break;
        case PayloadOneofCase.Stop:
          Stop = other.Stop;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bluetera.ImuStart subBuilder = new global::Bluetera.ImuStart();
            if (payloadCase_ == PayloadOneofCase.Start) {
              subBuilder.MergeFrom(Start);
            }
            input.ReadMessage(subBuilder);
            Start = subBuilder;
            break;
          }
          case 16: {
            Stop = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UplinkMessage : pb::IMessage<UplinkMessage> {
    private static readonly pb::MessageParser<UplinkMessage> _parser = new pb::MessageParser<UplinkMessage>(() => new UplinkMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UplinkMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Bluetera.BlueteraMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UplinkMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UplinkMessage(UplinkMessage other) : this() {
      switch (other.PayloadCase) {
        case PayloadOneofCase.Imu:
          Imu = other.Imu.Clone();
          break;
        case PayloadOneofCase.Echo:
          Echo = other.Echo.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UplinkMessage Clone() {
      return new UplinkMessage(this);
    }

    /// <summary>Field number for the "imu" field.</summary>
    public const int ImuFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.ImuCommand Imu {
      get { return payloadCase_ == PayloadOneofCase.Imu ? (global::Bluetera.ImuCommand) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Imu;
      }
    }

    /// <summary>Field number for the "echo" field.</summary>
    public const int EchoFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Bluetera.EchoPayload Echo {
      get { return payloadCase_ == PayloadOneofCase.Echo ? (global::Bluetera.EchoPayload) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Echo;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Imu = 1,
      Echo = 17,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UplinkMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UplinkMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Imu, other.Imu)) return false;
      if (!object.Equals(Echo, other.Echo)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (payloadCase_ == PayloadOneofCase.Imu) hash ^= Imu.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Echo) hash ^= Echo.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (payloadCase_ == PayloadOneofCase.Imu) {
        output.WriteRawTag(10);
        output.WriteMessage(Imu);
      }
      if (payloadCase_ == PayloadOneofCase.Echo) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(Echo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (payloadCase_ == PayloadOneofCase.Imu) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Imu);
      }
      if (payloadCase_ == PayloadOneofCase.Echo) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Echo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UplinkMessage other) {
      if (other == null) {
        return;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Imu:
          if (Imu == null) {
            Imu = new global::Bluetera.ImuCommand();
          }
          Imu.MergeFrom(other.Imu);
          break;
        case PayloadOneofCase.Echo:
          if (Echo == null) {
            Echo = new global::Bluetera.EchoPayload();
          }
          Echo.MergeFrom(other.Echo);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Bluetera.ImuCommand subBuilder = new global::Bluetera.ImuCommand();
            if (payloadCase_ == PayloadOneofCase.Imu) {
              subBuilder.MergeFrom(Imu);
            }
            input.ReadMessage(subBuilder);
            Imu = subBuilder;
            break;
          }
          case 138: {
            global::Bluetera.EchoPayload subBuilder = new global::Bluetera.EchoPayload();
            if (payloadCase_ == PayloadOneofCase.Echo) {
              subBuilder.MergeFrom(Echo);
            }
            input.ReadMessage(subBuilder);
            Echo = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
